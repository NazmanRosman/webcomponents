{
  "version": 1,
  "tags": [
    {
      "name": "lrnsys-button-inner",
      "description": "`lrnsys-button-inner`\n\nAttributes:\n\n  * `text` {`string`} - Text to present for clicking.\n\n  * `avatar` {`string`} - Icon to present for clicking.\n\n  * `icon` {`string`} - Icon to present for clicking.\n\nProperties:\n\n  * `text` {`string`} - Text to present for clicking.\n\n  * `avatar` {`string`} - Icon to present for clicking.\n\n  * `icon` {`string`} - Icon to present for clicking.",
      "attributes": [
        {
          "name": "text",
          "description": "`text` {`string`} - Text to present for clicking.\n\nProperty: text\n\nDefault: "
        },
        {
          "name": "avatar",
          "description": "`avatar` {`string`} - Icon to present for clicking.\n\nProperty: avatar\n\nDefault: "
        },
        {
          "name": "icon",
          "description": "`icon` {`string`} - Icon to present for clicking.\n\nProperty: icon\n\nDefault: "
        }
      ]
    },
    {
      "name": "lrnsys-dialog-toolbar-button",
      "description": "Events:\n\n  * `button-initialized` {`CustomEvent<{ id: string; }>`} - \n\n  * `dialog-toolbar-button-tapped` {`CustomEvent<{ id: any; }>`} - \n\nAttributes:\n\n  * `title` {`string`} - The title of the button.\n\n  * `icon` {`string`} - The button icon.\n\n  * `id` {`string`} - The button ID.\n\nProperties:\n\n  * `title` {`string`} - The title of the button.\n\n  * `icon` {`string`} - The button icon.\n\n  * `id` {`string`} - The button ID.",
      "attributes": [
        {
          "name": "title",
          "description": "`title` {`string`} - The title of the button.\n\nProperty: title"
        },
        {
          "name": "icon",
          "description": "`icon` {`string`} - The button icon.\n\nProperty: icon"
        },
        {
          "name": "id",
          "description": "`id` {`string`} - The button ID.\n\nProperty: id"
        },
        {
          "name": "onbutton-initialized",
          "description": "`button-initialized` {`CustomEvent<{ id: string; }>`} - "
        },
        {
          "name": "ondialog-toolbar-button-tapped",
          "description": "`dialog-toolbar-button-tapped` {`CustomEvent<{ id: any; }>`} - "
        }
      ]
    },
    {
      "name": "lrnsys-dialog-toolbar",
      "description": "Attributes:\n\n  * `_secondaryHasChildren` {`boolean`} - Internal state of secondary toolbar\n\nProperties:\n\n  * `_secondaryHasChildren` {`boolean`} - Internal state of secondary toolbar",
      "attributes": [
        {
          "name": "_secondaryHasChildren",
          "description": "`_secondaryHasChildren` {`boolean`} - Internal state of secondary toolbar\n\nProperty: _secondaryHasChildren\n\nDefault: false",
          "valueSet": "v"
        }
      ]
    },
    {
      "name": "lrnsys-dialog",
      "description": "`lrnsys-dialog`\n\nEvents:\n\n  * `simple-modal-show` {`CustomEvent<{ title: any; elements: { header: HTMLSpanElement; content: HTMLSpanElement; }; styles: { \"--simple-modal-width\": string; \"--simple-modal-max-width\": string; \"--simple-modal-z-index\": string; \"--simple-modal-min-height\": string; }; invokedBy: any; clone: boolean; }>`} - \n\n  * `focus-changed` {`CustomEvent<{ focus: boolean; }>`} - \n\nAttributes:\n\n  * `raised` {`boolean`} - If the button should be visually lifted off the UI.\n\n  * `alt` {`string`} - Alt / hover text for this link\n\n  * `header` {`string`} - Header for the dialog\n\n  * `hover-class` {`string`} - Classes to add / subtract based on the item being hovered\n\n  * `disabled` {`boolean`} - Disabled state.\n\n  * `focus-state` {`boolean`} - Tracks if focus state is applied\n\n  * `avatar` {`string`} - Icon to present for clicking.\n\n  * `icon` {`string`} - Icon to present for clicking.\n\n  * `text` {`string`} - Text to present for clicking.\n\n  * `heading-class` {`string`} - Default heading classes.\n\n  * `accent-color` {`string`} - a selected accent-\"color\": grey, red, pink, purple, etc.\n\n  * `dark` {`boolean`} - make the default theme dark?\n\nProperties:\n\n  * `raised` {`boolean`} - If the button should be visually lifted off the UI.\n\n  * `alt` {`string`} - Alt / hover text for this link\n\n  * `header` {`string`} - Header for the dialog\n\n  * `hoverClass` {`string`} - Classes to add / subtract based on the item being hovered\n\n  * `disabled` {`boolean`} - Disabled state.\n\n  * `focusState` {`boolean`} - Tracks if focus state is applied\n\n  * `avatar` {`string`} - Icon to present for clicking.\n\n  * `icon` {`string`} - Icon to present for clicking.\n\n  * `text` {`string`} - Text to present for clicking.\n\n  * `headingClass` {`string`} - Default heading classes.\n\n  * `__modal` - \n\n  * `accentColor` {`string`} - a selected accent-\"color\": grey, red, pink, purple, etc.\n\n  * `dark` {`boolean`} - make the default theme dark?\n\n  * `colors` - ",
      "attributes": [
        {
          "name": "raised",
          "description": "`raised` {`boolean`} - If the button should be visually lifted off the UI.\n\nProperty: raised",
          "valueSet": "v"
        },
        {
          "name": "alt",
          "description": "`alt` {`string`} - Alt / hover text for this link\n\nProperty: alt"
        },
        {
          "name": "header",
          "description": "`header` {`string`} - Header for the dialog\n\nProperty: header"
        },
        {
          "name": "hover-class",
          "description": "`hover-class` {`string`} - Classes to add / subtract based on the item being hovered\n\nProperty: hoverClass"
        },
        {
          "name": "disabled",
          "description": "`disabled` {`boolean`} - Disabled state.\n\nProperty: disabled\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "focus-state",
          "description": "`focus-state` {`boolean`} - Tracks if focus state is applied\n\nProperty: focusState\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "avatar",
          "description": "`avatar` {`string`} - Icon to present for clicking.\n\nProperty: avatar\n\nDefault: "
        },
        {
          "name": "icon",
          "description": "`icon` {`string`} - Icon to present for clicking.\n\nProperty: icon\n\nDefault: "
        },
        {
          "name": "text",
          "description": "`text` {`string`} - Text to present for clicking.\n\nProperty: text\n\nDefault: "
        },
        {
          "name": "heading-class",
          "description": "`heading-class` {`string`} - Default heading classes.\n\nProperty: headingClass\n\nDefault: white-text black"
        },
        {
          "name": "accent-color",
          "description": "`accent-color` {`string`} - a selected accent-\"color\": grey, red, pink, purple, etc.\n\nProperty: accentColor\n\nDefault: grey"
        },
        {
          "name": "dark",
          "description": "`dark` {`boolean`} - make the default theme dark?\n\nProperty: dark\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "onsimple-modal-show",
          "description": "`simple-modal-show` {`CustomEvent<{ title: any; elements: { header: HTMLSpanElement; content: HTMLSpanElement; }; styles: { \"--simple-modal-width\": string; \"--simple-modal-max-width\": string; \"--simple-modal-z-index\": string; \"--simple-modal-min-height\": string; }; invokedBy: any; clone: boolean; }>`} - "
        },
        {
          "name": "onfocus-changed",
          "description": "`focus-changed` {`CustomEvent<{ focus: boolean; }>`} - "
        }
      ]
    },
    {
      "name": "lrnsys-drawer",
      "description": "`lrnsys-drawer`\n\nEvents:\n\n  * `simple-drawer-show` {`CustomEvent<{ title: any; elements: { content: HTMLSpanElement; header: HTMLSpanElement; }; invokedBy: any; align: string; size: string; clone: boolean; }>`} - \n\n  * `focus-changed` {`CustomEvent<{ focus: boolean; }>`} - \n\nAttributes:\n\n  * `raised` {`boolean`} - If the button should be visually lifted off the UI.\n\n  * `alt` {`string`} - Alt / hover text for this link\n\n  * `header` {`string`} - Header for the drawer\n\n  * `hover-class` {`string`} - Classes to add / subtract based on the item being hovered\n\n  * `opened` {`boolean`} - State for if it is currently open.\n\n  * `align` {`string`} - Side of the screen to align the flyout (right or left)\n\n  * `disabled` {`boolean`} - Disabled state.\n\n  * `focus-state` {`boolean`} - Tracks if focus state is applied\n\n  * `avatar` {`string`} - Icon to present for clicking.\n\n  * `icon` {`string`} - Icon to present for clicking.\n\n  * `text` {`string`} - Text to present for clicking.\n\n  * `accent-color` {`string`} - a selected accent-\"color\": grey, red, pink, purple, etc.\n\n  * `dark` {`boolean`} - make the default theme dark?\n\nProperties:\n\n  * `raised` {`boolean`} - If the button should be visually lifted off the UI.\n\n  * `alt` {`string`} - Alt / hover text for this link\n\n  * `header` {`string`} - Header for the drawer\n\n  * `hoverClass` {`string`} - Classes to add / subtract based on the item being hovered\n\n  * `opened` {`boolean`} - State for if it is currently open.\n\n  * `align` {`string`} - Side of the screen to align the flyout (right or left)\n\n  * `disabled` {`boolean`} - Disabled state.\n\n  * `focusState` {`boolean`} - Tracks if focus state is applied\n\n  * `avatar` {`string`} - Icon to present for clicking.\n\n  * `icon` {`string`} - Icon to present for clicking.\n\n  * `text` {`string`} - Text to present for clicking.\n\n  * `__modal` - \n\n  * `accentColor` {`string`} - a selected accent-\"color\": grey, red, pink, purple, etc.\n\n  * `dark` {`boolean`} - make the default theme dark?\n\n  * `colors` - ",
      "attributes": [
        {
          "name": "raised",
          "description": "`raised` {`boolean`} - If the button should be visually lifted off the UI.\n\nProperty: raised",
          "valueSet": "v"
        },
        {
          "name": "alt",
          "description": "`alt` {`string`} - Alt / hover text for this link\n\nProperty: alt"
        },
        {
          "name": "header",
          "description": "`header` {`string`} - Header for the drawer\n\nProperty: header"
        },
        {
          "name": "hover-class",
          "description": "`hover-class` {`string`} - Classes to add / subtract based on the item being hovered\n\nProperty: hoverClass"
        },
        {
          "name": "opened",
          "description": "`opened` {`boolean`} - State for if it is currently open.\n\nProperty: opened\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "align",
          "description": "`align` {`string`} - Side of the screen to align the flyout (right or left)\n\nProperty: align\n\nDefault: left"
        },
        {
          "name": "disabled",
          "description": "`disabled` {`boolean`} - Disabled state.\n\nProperty: disabled\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "focus-state",
          "description": "`focus-state` {`boolean`} - Tracks if focus state is applied\n\nProperty: focusState\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "avatar",
          "description": "`avatar` {`string`} - Icon to present for clicking.\n\nProperty: avatar\n\nDefault: "
        },
        {
          "name": "icon",
          "description": "`icon` {`string`} - Icon to present for clicking.\n\nProperty: icon\n\nDefault: "
        },
        {
          "name": "text",
          "description": "`text` {`string`} - Text to present for clicking.\n\nProperty: text\n\nDefault: "
        },
        {
          "name": "accent-color",
          "description": "`accent-color` {`string`} - a selected accent-\"color\": grey, red, pink, purple, etc.\n\nProperty: accentColor\n\nDefault: grey"
        },
        {
          "name": "dark",
          "description": "`dark` {`boolean`} - make the default theme dark?\n\nProperty: dark\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "onsimple-drawer-show",
          "description": "`simple-drawer-show` {`CustomEvent<{ title: any; elements: { content: HTMLSpanElement; header: HTMLSpanElement; }; invokedBy: any; align: string; size: string; clone: boolean; }>`} - "
        },
        {
          "name": "onfocus-changed",
          "description": "`focus-changed` {`CustomEvent<{ focus: boolean; }>`} - "
        }
      ]
    }
  ],
  "globalAttributes": [],
  "valueSets": []
}
